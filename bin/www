#!/usr/bin/env node

console.log('starting from ./bin/www script');

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('workspace:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');
var config = require('config')[process.env.NODE_ENV];

/**
 * Get port from environment and store in Express.
 */

var port = config.port;
app.set('port', port);

/**
 * SSL options
 */
 
var serveropts = {
     key: fs.readFileSync(path.join(__dirname,'privkey.pem')),
     cert: fs.readFileSync(path.join(__dirname,'fullchain.pem')),
     ca: fs.readFileSync(path.join(__dirname,'chain.pem'))
}
 
//var serveropts = {
//  key: fs.readFileSync(path.join(__dirname,'private.key' )),
//  cert: fs.readFileSync(path.join(__dirname,'certificate.pem')),
//  ca: fs.readFileSync(path.join(__dirname,'cert.csr'))
//};

/**
 * Start up HTTP
 */

console.log("server will listen on " + process.env.PORT + ":" + process.env.IP);

// use ssl on prod
if ( process.env.NODE_ENV === 'production' ) { 
  var server = https.createServer(serveropts, app); 
  
  // redirect http urls to http
  http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
    res.end();
  }).listen(80);

}

// use http otherwise
else  { var server = http.createServer(app); }

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
