//using https://darrenderidder.github.io/talks/ModulePatterns/#/10
//export anonymous prototype

// includes
var express = require('express');
var svxy = express.Router();
var config = require('config')[process.env.NODE_ENV];
var request = require('request');
var fs = require('fs');
var schedule = require('node-schedule');
var thedb = require('monk')(config.mongo.ip + ':27017/assistant');
var csv = require('csv');
var crypto = require('crypto');

// constructor
var Grabber = function (url, collection) {
    this.url = url;
    this.filename = url.substring(url.lastIndexOf('/')+1);
    this.collection = collection;
    var self = this;
};

// init function
Grabber.prototype.init = function () {
    console.log('init jobs');
    
    // grab on startup, just to be sure
    this.grab();
    // init scheduled jobs
    //var grab_job = schedule.scheduleJob('30 11,16,20 * * *', function() {
    var grab_job = schedule.scheduleJob('0 * * * *', function() {
        console.log('grabbing url: ' + this.url );
        this.grab();
        console.log('grabbed url: ' + this.url + 'into collection: ' + this.collection);
    });

};

// grabs the data 
Grabber.prototype.grab = function() {

    var collect = thedb.get(this.collection);
    
    //make a HTTP GET request
    request(this.url, (this.makeReq).bind(this));
}


Grabber.prototype.makeReq = (function (error, response, body)  {
        if (!error && response.statusCode == 200) {
                this.insertIfNotLoaded(body);
        }
        else {
            if (typeof response !== 'undefined') {
                console.error('HTTP get to ' + this.url + ' failed with response ' + response.statusCode + ' Error: ' + error);
            }
            else {
                console.error('HTTP request to ' + this.url + ' failed. Error: ' + error);
            }
        }
});
    
    
Grabber.prototype.insertIfNotLoaded = function(body) {
    // check if we have already loaded the stuff...
    var collect = thedb.get(this.collection);
    
    var promise = collect.find({},{sort: {_id: -1},limit: 5}, (function(err, blob, already_in_mongo) {
        var md5 = crypto.createHash('md5').update(body).digest('hex');   
        if (err !== null )  { console.log(err) } else {
            already_in_mongo = false;

            for ( var i = 0; i < blob.length; i++) {
                if ( typeof blob[i].md5 === 'undefined' ) {
                    already_in_mongo = ( blob[i].body === body );
                }
                else {
                    already_in_mongo = ( blob[i].md5 === md5 );
                }
            }
            
            // if it's not in there.. then drop it in
            if (!already_in_mongo) {
                this.insertIntoMongo(body, md5);
            }
        }
        
    }).bind(this));
}

// put into mongo
Grabber.prototype.insertIntoMongo = function(body, md5) {
    var collect = thedb.get(this.collection);
    
    collect.insert({
                filename: this.filename,
                body: body,
                md5: md5,
                date: new Date(),
                processed: false
            }, function(err, result) {
                if (err !== null) {
                    console.log(err);
            };
    });
}

module.exports = Grabber;