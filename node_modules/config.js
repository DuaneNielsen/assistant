// this config reads is stuff from environment variables..
// so set the env variables, dont mess with this!

//requires
var fs = require('fs');
var path = require('path');

// PROD 
// mongo should resolve to mongo in DNS
// postgres should resolve to postgres in DNS
// POSTGRES_PASSWORD must be passed as ENV variable

// ssl config

var production =  {
    port: normalizePort(process.env.PORT  || '443'),
    mongo: { 
        ip : 'mongo',
        monk: require('monk')('mongo:27017/assistant')
    },
    postgres: { 
        connectstring : 'postgres://postgres:'+process.env.POSTGRES_PASSWORD+'@'+'postgres:5432/assistant'
    },
    httpsServerOptions: loadHTTPSServerOptions()
};


// DEV
// IP = local box IP  (assumes all components local)

var development = {
    port: normalizePort(process.env.PORT || '3000'),
    mongo: { 
        ip : process.env.IP,
        monk: require('monk')(process.env.IP+':27017/assistant')
    },
    postgres: { 
        connectstring :  'postgres://postgres:_(PI-9pi_(PI@0.0.0.0/assistant'
    }

};

var config = {
    production: production,
    development: development,
    'undefined' : development
};

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function loadHTTPSServerOptions() {

    var letsencryptdir = path.normalize('/etc/letsencrypt/live/vixkings.com/');
    var keydir = path.normalize( __dirname + '/../keys' );
    
    var options;
    
    
    //try to read letsecrypt
    try  {
        options = {
            key: fs.readFileSync(path.join(letsencryptdir, 'privkey.pem')),
            cert: fs.readFileSync(path.join(letsencryptdir, 'fullchain.pem')),
            ca: fs.readFileSync(path.join(letsencryptdir, 'chain.pem'))
        }
    }
    
    // if I couldn't read from letsencrypt read from the self signed keys instead
    catch (e) {

        options = {
          key: fs.readFileSync(path.join(keydir,'privkey.pem')),
          cert: fs.readFileSync(path.join(keydir,'fullchain.pem')),
          ca: fs.readFileSync(path.join(keydir,'chain.pem'))
        }
    }
    return options;
}

module.exports = config;


